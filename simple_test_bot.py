#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞
"""

import asyncio
import logging
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from config import BOT_TOKEN
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

async def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123)")

async def handle_text(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
    
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if text.startswith('#'):
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞: {text}")
        
        try:
            # –ò—â–µ–º —Ñ–∏–ª—å–º –≤ –±–∞–∑–µ
            film = db.get_film_by_code(text)
            print(f"üìΩÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {film}")
            
            if film:
                print(f"‚úÖ –§–∏–ª—å–º –Ω–∞–π–¥–µ–Ω: {film['title']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                await update.message.reply_text(
                    f"üé¨ –ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º!\n\n"
                    f"üìΩÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {film['title']}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {film['link']}\n"
                    f"üÜî –ö–æ–¥: {film['code']}"
                )
                print(f"‚úÖ –§–∏–ª—å–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                print(f"‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await update.message.reply_text(f"‚ùå –§–∏–ª—å–º —Å –∫–æ–¥–æ–º {text} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            import traceback
            traceback.print_exc()
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
    else:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –Ω–∞—á–∏–Ω–∞—è —Å # (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123)")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await application.run_polling()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
