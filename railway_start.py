import asyncio
import logging
import sys
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_TOKEN, ADMIN_ID
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

async def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    if user_id == ADMIN_ID:
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º", callback_data="admin_add_film")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º", callback_data="admin_edit_film")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º", callback_data="admin_delete_film")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞", callback_data="search_film")]
        ]
        text = "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\nüëë –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    else:
        # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞", callback_data="search_film")]
        ]
        text = "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é"
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_text(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
    
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if user_id == ADMIN_ID and 'admin_action' in context.user_data:
        await handle_admin_text(update, context)
        return
    
    if text.startswith('#'):
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞: {text}")
        
        try:
            # –ò—â–µ–º —Ñ–∏–ª—å–º –≤ –±–∞–∑–µ
            film = db.get_film_by_code(text)
            print(f"üìΩÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {film}")
            
            if film:
                print(f"‚úÖ –§–∏–ª—å–º –Ω–∞–π–¥–µ–Ω: {film['title']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                await update.message.reply_text(
                    f"üé¨ –ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º!\n\n"
                    f"üìΩÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {film['title']}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {film['link']}\n"
                    f"üÜî –ö–æ–¥: {film['code']}"
                )
                print(f"‚úÖ –§–∏–ª—å–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                print(f"‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await update.message.reply_text(f"‚ùå –§–∏–ª—å–º —Å –∫–æ–¥–æ–º {text} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            import traceback
            traceback.print_exc()
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
    else:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –Ω–∞—á–∏–Ω–∞—è —Å # (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123)")

async def handle_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    
    await query.answer()
    
    if data == "search_film":
        await query.edit_message_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∏–º–≤–æ–ª–∞ # (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123)"
        )
    
    elif data == "admin_add_film":
        if user_id == ADMIN_ID:
            await start_add_film(update, context)
        else:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    elif data == "admin_edit_film":
        if user_id == ADMIN_ID:
            await start_edit_film(update, context)
        else:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    elif data == "admin_delete_film":
        if user_id == ADMIN_ID:
            await start_delete_film(update, context)
        else:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    elif data == "admin_stats":
        if user_id == ADMIN_ID:
            await show_stats(update, context)
        else:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    elif data == "back_to_admin":
        if user_id == ADMIN_ID:
            await start(update, context)
        else:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

async def start_add_film(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
    query = update.callback_query
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['admin_action'] = 'add_film'
    context.user_data['step'] = 'code'
    
    await query.edit_message_text(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123):"
    )

async def start_edit_film(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
    query = update.callback_query
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['admin_action'] = 'edit_film'
    context.user_data['step'] = 'code'
    
    await query.edit_message_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )

async def start_delete_film(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
    query = update.callback_query
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['admin_action'] = 'delete_film'
    context.user_data['step'] = 'code'
    
    await query.edit_message_text(
        "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    )

async def show_stats(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    
    try:
        stats = db.get_today_stats()
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
            f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤: {stats['views_today']}\n"
            f"üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['new_users_today']}",
            reply_markup=reply_markup
        )
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def handle_admin_text(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        return
    
    if 'admin_action' not in context.user_data:
        return
    
    action = context.user_data['admin_action']
    step = context.user_data.get('step', '')
    text = update.message.text
    
    if action == 'add_film':
        await process_add_film(update, context, step, text)
    elif action == 'edit_film':
        await process_edit_film(update, context, step, text)
    elif action == 'delete_film':
        await process_delete_film(update, context, step, text)

async def process_add_film(update, context, step, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ –ø–æ—à–∞–≥–æ–≤–æ"""
    if step == 'code':
        if not text.startswith('#'):
            await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ #")
            return
        
        context.user_data['film_code'] = text
        context.user_data['step'] = 'title'
        
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
    
    elif step == 'title':
        context.user_data['film_title'] = text
        context.user_data['step'] = 'cover'
        
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–ª–æ–∂–∫—É —Ñ–∏–ª—å–º–∞ (—Ñ–æ—Ç–æ):"
        )
    
    elif step == 'link':
        context.user_data['film_link'] = text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –≤ –±–∞–∑—É
        code = context.user_data['film_code']
        title = context.user_data['film_title']
        cover = context.user_data['film_cover']
        link = text
        
        if db.add_film(code, title, cover, link):
            await update.message.reply_text(
                f"‚úÖ –§–∏–ª—å–º {code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                f"–°—Å—ã–ª–∫–∞: {link}"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def process_edit_film(update, context, step, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ –ø–æ—à–∞–≥–æ–≤–æ"""
    if step == 'code':
        film = db.get_film_by_code(text)
        if not film:
            await update.message.reply_text("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        context.user_data['film_code'] = text
        context.user_data['step'] = 'choose_field'
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title")],
            [InlineKeyboardButton("–û–±–ª–æ–∂–∫—É", callback_data="edit_cover")],
            [InlineKeyboardButton("–°—Å—ã–ª–∫—É", callback_data="edit_link")],
            [InlineKeyboardButton("–ö–æ–¥", callback_data="edit_code")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ {text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=reply_markup
        )

async def process_delete_film(update, context, step, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
    if step == 'code':
        film = db.get_film_by_code(text)
        if not film:
            await update.message.reply_text("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if db.delete_film(text):
            await update.message.reply_text(
                f"‚úÖ –§–∏–ª—å–º {text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_photo(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID or 'admin_action' not in context.user_data:
        return
    
    action = context.user_data['admin_action']
    step = context.user_data.get('step', '')
    
    if action == 'add_film' and step == 'cover':
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = photo.file_id
        
        context.user_data['film_cover'] = file_id
        context.user_data['step'] = 'link'
        
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å–º:")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Railway"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ –¥–ª—è Railway Worker
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway Worker...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ polling —Ä–µ–∂–∏–º–µ")
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise

if __name__ == '__main__':
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    finally:
        try:
            loop.close()
        except:
            pass
