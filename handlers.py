from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import Database
from config import CHANNELS, ADMIN_ID
import re

db = Database()

class Handlers:
    @staticmethod
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        db.add_user(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if await Handlers.check_subscription(update, context):
            await Handlers.show_main_menu(update, context)
        else:
            await Handlers.show_subscription_request(update, context)
    
    @staticmethod
    async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
        user_id = update.effective_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
            for channel in CHANNELS:
                member = await context.bot.get_chat_member(channel["id"], user_id)
                if member.status in ['left', 'kicked']:
                    db.update_subscription_status(user_id, False)
                    return False
            
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            db.update_subscription_status(user_id, True)
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    @staticmethod
    async def show_subscription_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É"""
        keyboard = []
        for channel in CHANNELS:
            keyboard.append([InlineKeyboardButton(
                f"üì∫ {channel['name']}", 
                url=f"https://t.me/{channel['username'][1:]}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if user_id == ADMIN_ID:
            # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º", callback_data="admin_add_film")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º", callback_data="admin_edit_film")],
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º", callback_data="admin_delete_film")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞", callback_data="search_film")]
            ]
        else:
            # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞", callback_data="search_film")],
                [InlineKeyboardButton("üì∫ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤!\n\n"
        if user_id == ADMIN_ID:
            text += "üëë –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        else:
            text += "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    @staticmethod
    async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if user_id == ADMIN_ID and 'admin_action' in context.user_data:
            await Handlers.handle_admin_text(update, context)
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # if not await Handlers.check_subscription(update, context):
        #     await Handlers.show_subscription_request(update, context)
        #     return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–¥–æ–º —Ñ–∏–ª—å–º–∞
        if text.startswith('#'):
            await Handlers.search_film_by_code(update, context, text)
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∏–º–≤–æ–ª–∞ # (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123)"
            )
    
    @staticmethod
    async def search_film_by_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –∫–æ–¥—É"""
        user_id = update.effective_user.id
        code = update.message.text
        
        film = db.get_film_by_code(code)
        
        if film:
            # –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
            db.add_view(user_id, film['id'])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=film['cover'],
                caption=f"üé¨ {film['title']}\n\nüîó –°—Å—ã–ª–∫–∞: {film['link']}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –§–∏–ª—å–º —Å –∫–æ–¥–æ–º {code} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    @staticmethod
    async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id
        
        await query.answer()
        
        if data == "check_sub":
            if await Handlers.check_subscription(update, context):
                await Handlers.show_main_menu(update, context)
            else:
                await query.edit_message_text(
                    "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_sub")
                    ]])
                )
        
        elif data == "search_film":
            await query.edit_message_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∏–º–≤–æ–ª–∞ # (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123)"
            )
        
        elif data == "admin_add_film":
            if user_id == ADMIN_ID:
                await Handlers.start_add_film(update, context)
            else:
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        elif data == "admin_edit_film":
            if user_id == ADMIN_ID:
                await Handlers.start_edit_film(update, context)
            else:
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        elif data == "admin_delete_film":
            if user_id == ADMIN_ID:
                await Handlers.start_delete_film(update, context)
            else:
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        elif data == "admin_stats":
            if user_id == ADMIN_ID:
                await Handlers.show_stats(update, context)
            else:
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        elif data == "back_to_admin":
            if user_id == ADMIN_ID:
                await Handlers.show_main_menu(update, context)
            else:
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        elif data.startswith("edit_"):
            if user_id == ADMIN_ID:
                await Handlers.handle_edit_field(update, context, data)
            else:
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    @staticmethod
    async def start_add_film(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
        query = update.callback_query
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['admin_action'] = 'add_film'
        context.user_data['step'] = 'code'
        
        await query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123):"
        )
    
    @staticmethod
    async def start_edit_film(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
        query = update.callback_query
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['admin_action'] = 'edit_film'
        context.user_data['step'] = 'code'
        
        await query.edit_message_text(
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
    
    @staticmethod
    async def start_delete_film(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
        query = update.callback_query
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['admin_action'] = 'delete_film'
        context.user_data['step'] = 'code'
        
        await query.edit_message_text(
            "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        )
    
    @staticmethod
    async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        query = update.callback_query
        
        stats = db.get_today_stats()
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
            f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤: {stats['views_today']}\n"
            f"üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['new_users_today']}",
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def handle_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if user_id != ADMIN_ID:
            return
        
        if 'admin_action' not in context.user_data:
            return
        
        action = context.user_data['admin_action']
        step = context.user_data.get('step', '')
        text = update.message.text
        
        if action == 'add_film':
            await Handlers.process_add_film(update, context, step, text)
        elif action == 'edit_film':
            await Handlers.process_edit_film(update, context, step, text)
        elif action == 'delete_film':
            await Handlers.process_delete_film(update, context, step, text)
    
    @staticmethod
    async def process_add_film(update: Update, context: ContextTypes.DEFAULT_TYPE, step: str, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ –ø–æ—à–∞–≥–æ–≤–æ"""
        if step == 'code':
            if not text.startswith('#'):
                await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ #")
                return
            
            context.user_data['film_code'] = text
            context.user_data['step'] = 'title'
            
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
        
        elif step == 'title':
            context.user_data['film_title'] = text
            context.user_data['step'] = 'cover'
            
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–ª–æ–∂–∫—É —Ñ–∏–ª—å–º–∞ (—Ñ–æ—Ç–æ):"
            )
        
        elif step == 'link':
            context.user_data['film_link'] = text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –≤ –±–∞–∑—É
            code = context.user_data['film_code']
            title = context.user_data['film_title']
            cover = context.user_data['film_cover']
            link = text
            
            if db.add_film(code, title, cover, link):
                await update.message.reply_text(
                    f"‚úÖ –§–∏–ª—å–º {code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                    f"–°—Å—ã–ª–∫–∞: {link}"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    @staticmethod
    async def process_edit_film(update: Update, context: ContextTypes.DEFAULT_TYPE, step: str, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ –ø–æ—à–∞–≥–æ–≤–æ"""
        if step == 'code':
            film = db.get_film_by_code(text)
            if not film:
                await update.message.reply_text("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            context.user_data['film_code'] = text
            context.user_data['step'] = 'choose_field'
            
            keyboard = [
                [InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title")],
                [InlineKeyboardButton("–û–±–ª–æ–∂–∫—É", callback_data="edit_cover")],
                [InlineKeyboardButton("–°—Å—ã–ª–∫—É", callback_data="edit_link")],
                [InlineKeyboardButton("–ö–æ–¥", callback_data="edit_code")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ {text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                reply_markup=reply_markup
            )
        
        elif step == 'edit_value':
            field = context.user_data.get('edit_field')
            film_code = context.user_data.get('film_code')
            
            if field and film_code:
                if db.update_film(film_code, field, text):
                    await update.message.reply_text(f"‚úÖ {field} –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.clear()
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    @staticmethod
    async def process_delete_film(update: Update, context: ContextTypes.DEFAULT_TYPE, step: str, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
        if step == 'code':
            film = db.get_film_by_code(text)
            if not film:
                await update.message.reply_text("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if db.delete_film(text):
                await update.message.reply_text(
                    f"‚úÖ –§–∏–ª—å–º {text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    @staticmethod
    async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user_id = update.effective_user.id
        
        if user_id != ADMIN_ID or 'admin_action' not in context.user_data:
            return
        
        action = context.user_data['admin_action']
        step = context.user_data.get('step', '')
        
        if action == 'add_film' and step == 'cover':
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            file_id = photo.file_id
            
            context.user_data['film_cover'] = file_id
            context.user_data['step'] = 'link'
            
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å–º:")
        
        elif action == 'edit_film' and step == 'cover':
            photo = update.message.photo[-1]
            file_id = photo.file_id
            
            film_code = context.user_data.get('film_code')
            if film_code and db.update_film(film_code, 'cover', file_id):
                await update.message.reply_text("‚úÖ –û–±–ª–æ–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏")
            
            context.user_data.clear()
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    @staticmethod
    async def handle_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        field = data.replace("edit_", "")
        
        context.user_data['edit_field'] = field
        context.user_data['step'] = 'edit_value'
        
        field_names = {
            'title': '–Ω–∞–∑–≤–∞–Ω–∏–µ',
            'cover': '–æ–±–ª–æ–∂–∫—É',
            'link': '—Å—Å—ã–ª–∫—É',
            'code': '–∫–æ–¥'
        }
        
        field_name = field_names.get(field, field)
        
        if field == 'cover':
            await query.edit_message_text(
                f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {field_name}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É —Ñ–∏–ª—å–º–∞ (—Ñ–æ—Ç–æ):"
            )
        else:
            await query.edit_message_text(
                f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {field_name}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )
